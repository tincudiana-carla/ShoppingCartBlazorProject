@page "/products"
@inject IAdminPanelService adminPanelService;

@if (productModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <h4 class="card-header">Product</h4>
        <div class="card-body">
            <EditForm Model="@productModel" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <div class="form-group col-3">
                    <label>Name :</label>
                    <InputText @bind-Value="productModel.Name" class="form-control" />
                    <ValidationMessage For="@(() => productModel.Name)" />
                </div>
                <div class="form-group col-3">
                    <label>Price :</label>
                    <InputNumber @bind-Value="productModel.Price" class="form-control" />
                    <ValidationMessage For="@(() => productModel.Price)" />
                </div>
                <div class="form-group col-3">
                    <label>Stock :</label>
                    <InputNumber @bind-Value="productModel.Stock" class="form-control" />
                    <ValidationMessage For="@(() => productModel.Stock)" />
                </div>

                <div class="form-group col-3">
                    <label>Select Category :</label>
                    @if (categoryList != null && categoryList.Count > 0)
                    {
                        <select class="form-control" @onchange="CategoryClicked">
                            <option value="">--Select--</option>
                            @foreach (var category in categoryList)
                            {
                                <option value="@category.Id.ToString()">@category.Name</option>
                            }
                        </select>
                    }
                    <ValidationMessage For="@(() => productModel.CategoryId)" />
                </div>

                <div class="form-row">
                    <div class="form-group col-3">
                        <label>Select Photo :</label>
                        <label style="border:1px ridge #808080">
                            <InputFile OnChange="@OnInputFileChange" multiple />
                        </label>
                        <ValidationMessage For="@(() => productModel.FileName)" />
                        @if (imageUrls?.Any() == true)
                        {
                            <table style="border:1px ridge #808080">
                                <tr>
                                    @foreach (var imgsrc in imageUrls)
                                    {
                                        <td>
                                            <img src="@imgsrc" style="max-width: 100px; max-height: 100px;" />
                                        </td>
                                    }
                                </tr>
                            </table>
                        }
                    </div>
                </div>
                <div class="text-left">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <input type="button" class="btn btn-secondary" value="Clear" @onclick="ClearForm" />
                </div>
            </EditForm>
        </div>

        <div class="card-body">
            @if (productList == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table table-striped table-bordered bg-light">
                    <thead>
                        <tr>
                            <th style="width:15px;">
                                Sr.No
                            </th>>
                            <th>
                                Name
                            </th>
                            <th>
                                Price
                            </th>
                            <th>
                                Stock
                            </th>
                            <th>
                                Category
                            </th>

                            <th style="width:80px;">
                                Delete?
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (index, prod) in productList.Select((prod, i) => (i + 1, prod)))
                        {
                            <tr>
                                <td>
                                    @index
                                </td>

                                <td>
                                    @prod.Name
                                </td>
                                <td>
                                    @prod.Price
                                </td>
                                <td>
                                    @prod.Stock
                                </td>
                                <td>
                                    @prod.CategoryName
                                </td>
                                <td>
                                    <input type="button" class="btn btn-primary" value="Delete" @onclick="(()=>DeleteButtonClick(prod))" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@if (success)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                Alert
                <span class="close" @onclick="ToggleSuccess">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccess" />
            </div>
        </div>
    </div>
}


@if (showDelete)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Product</h5>
                <span class="close" @onclick="ToggleDelete">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span style="background-color:yellow;">@productToDelete.Name</span> ?
            </div>

            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteProduct" />
                <input type="button" class="btn btn-primary" value="No" @onclick="ToggleDelete" />
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<CategoryModel> categoryList { get; set; } = new List<CategoryModel>();
    public ProductModel productModel { get; set; } = new ProductModel();
    public List<ProductModel> productList { get; set; }
    public int categoryId { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    public ProductModel productToUpdate { get; set; }
    public ProductModel productToDelete { get; set; }
    public bool showDelete = false;
    public bool success = false;
    string Message = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetCategories();
        await GetProducts();
    }

    private async Task GetCategories()
    {
        categoryList = await adminPanelService.GetCategories();
    }

    private async Task GetProducts()
    {
        productList = await adminPanelService.GetProducts();
    }

    private async Task SaveProduct()
    {
        var selectedFile = selectedFiles.FirstOrDefault();
        if (selectedFile == null)
        {
            throw new InvalidOperationException("No file selected.");
        }

        using (var stream = selectedFile.OpenReadStream())
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            productModel.FileContent = memoryStream.ToArray();
        }

        productModel.CategoryId = categoryId;
        productModel.FileName = selectedFile.Name;
        productModel.ImageURL = $"Images/{selectedFile.Name}";

        var selectedCategory = categoryList.FirstOrDefault(c => c.Id == categoryId);
        productModel.CategoryName = selectedCategory?.Name;
        try
        {
            var result = await adminPanelService.SaveProduct(productModel);
            if (result == null)
            {
                throw new Exception("Failed to save product.");
            }
            await GetProducts();
            ClearForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
            throw;
        }

    }
 

    private void DeleteButtonClick(ProductModel product)
    {
        productToDelete = product;
        ToggleDelete();
    }

    private async Task DeleteProduct()
    {
        bool flag = await adminPanelService.DeleteProduct(productToDelete.Id);
        ToggleDelete();
        Message = flag == true ? "Product Deleted!" : "Product NOT Deleted";
        ToggleSuccess();
        productToDelete = new ProductModel();
        await GetProducts();

    }
    private void ToggleDelete()
    {
        showDelete = showDelete == true ? false : true;
    }

    private void ToggleSuccess()
    {
        success = success == true ? false : true;
    }

    private void ClearForm()
    {
        productModel = new ProductModel();
        imageUrls = new List<string>();
    }

    private void CategoryClicked(ChangeEventArgs categoryEvent)
    {
        if (int.TryParse(Convert.ToString(categoryEvent.Value), out int selectedCategoryId))
        {
            categoryId = selectedCategoryId;
            productModel.CategoryId = selectedCategoryId;
            this.StateHasChanged();
        }
        else
        {
            Console.WriteLine("Invalid category ID.");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        productModel.FileName = string.Empty;
        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imgData);
            productModel.FileName = imgData;
        }
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
}