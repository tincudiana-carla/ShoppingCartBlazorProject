@inherits LayoutComponentBase
@inject IUserPanelService userPanelService;
@inject NavigationManager navManager;
@inject ProtectedSessionStorage sessionStorage;
<PageTitle>Shop.Web</PageTitle>

<div class="mainlayout">

    <div style="padding-bottom:25px;">

        <div class="divleft" style="padding-right:15px;">
            <NavLink href="/">
                Home
            </NavLink>
        </div>

        <div class="divleft">
            @if (IsUserLoggedIn)
            {
                <i class="fade fa-user"></i>

                <span>Welcome, @LoggedInUsername</span>
            }
            else
            {
                <i class="fa fa-user"></i>

                <span>Welcome,</span>
            }
        </div>


        <div class="divright">
            @if (IsUserLoggedIn)
            {
                <div style="padding-left:15px;">
                    <i class="fa fa-sign-out"></i>
                    <a @onclick="@Logout" href="#">Log Out</a>
                </div>
            }

        </div>

        <div class="divright">
            @if (IsUserLoggedIn)
            {
               <NavLink href="myaccount">
                   MyAccount
               </NavLink>
            }

        </div>

        <div class="divright">
            @if (!IsUserLoggedIn)
            {
                <NavLink href="login">
                    Login
                </NavLink>
            }

        </div>
        <div class="divright">
            @if (!IsUserLoggedIn)
            {
                <NavLink href="register">
                    Register
                </NavLink>
            }

        </div>


    </div>


    <div class="headerMainLayout">
        <div class="col-container">

            <div class="col" style="border-radius:25px;">
                <NavLink href="/">
                    <img src="images/ShoppingIcon.png"
                         alt="Shopping Icon"
                         style="cursor:pointer; width: 75px; height: 75px; mask-image: radial-gradient(circle, white 60%, transparent 100%); -webkit-mask-image: radial-gradient(circle, white 60%, transparent 100%);" />
                </NavLink>
            </div>


            <div class="col" style="text-align: right;">
                @if (cartCount > 0)
                {
                    <a href="/mycart">
                        <i class="fa fa-shopping-cart" style="font-size:48px; color:black; position:relative; margin-right: 50px;">
                            <span style="position:absolute; top:-10px; right:-10px; background:red; color:white;
                             border-radius:50%; padding:5px 10px; font-weight:bold; font-size:20px;">
                                @cartCount
                            </span>
                        </i>
                    </a>
                }
                else
                {
                    <a href="/mycart">
                        <i class="fa fa-shopping-cart" style="font-size:48px; color:black; margin-right: 50px;"></i>
                    </a>
                }
            </div>

        </div>
    </div>
    <main>
        <div>
            <CascadingValue Value="event_notify">@Body</CascadingValue>
        </div>
    </main>
    <div class="footerMainLayout">
        &copy; 2024 - Carla's Shopping Cart
    </div>
</div>

    @code {
    public int cartCount = 0;
    public int layoutState = 0;
    public bool IsUserLoggedIn = false;
    public string LoggedInUsername = "User";
    public List<CartModel> myCart { get; set; }
    EventCallback event_notify => EventCallback.Factory.Create(this, NotifyLayout);

    private async Task NotifyLayout()
    {
        // IsUserLoggedIn = await userPanelService.IsUserLoggedIn();
        // if (IsUserLoggedIn && layoutState == 0)
        // {
        //     var usernameSession = await sessionStorage.GetAsync<string>("username");
        //     LoggedInUsername = usernameSession.Value;
        //     var checkoutSession = await sessionStorage.GetAsync<string>("checkoutAlert");
        //     if (checkoutSession.Success)
        //     {
        //         await sessionStorage.DeleteAsync("checkoutAlert");
        //         navManager.NavigateTo("/mycart");
        //     }
        //     StateHasChanged();
        //     layoutState++;
        // }
        if(layoutState == -1)
        {
            StateHasChanged();
        }
        var result = await sessionStorage.GetAsync<List<CartModel>>("myCart");
        if (result.Success)
        {
            myCart = result.Value;
            cartCount = myCart.Count;
            await sessionStorage.DeleteAsync("updateCartFlag");
            StateHasChanged();
        }
        else
        {
            cartCount = 0;
        }
    }

    private void Logout()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NotifyLayout();
        }
    }

}
