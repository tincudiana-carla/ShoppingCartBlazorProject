@page "/login"
@inject NavigationManager navManager; 
@inject IAdminPanelService  adminPanelService;
@inject ProtectedSessionStorage sessionStorage;

<h3>Login</h3>
<link href="~/css/login.css" rel="stylesheet" />
<style>
    body {
        background-color: #A9EAFE;
        color: white;
        margin: 0;
        font-family: Arial, sans-serif;
    }

</style>

<div style="min-height:400px;">

    <div class="loginBox">
        <div class="box">
            <br />
            <h1>Admin Panel</h1>
            @if (loginModel != null)
            {
                <EditForm Model="@loginModel" OnValidSubmit="Login_Click">
                    <DataAnnotationsValidator/>

                    <InputText type="email" name="email" class="email" placeholder="email" @bind-Value="loginModel.EmailId" autocomplete="off" />
                    <ValidationMessage For="@(()=> loginModel.EmailId)" />
                    <InputText type="password" name="password" class="password" placeholder="password" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(()=> loginModel.Password)" />
                        <br /> <br />
                    <input type="submit" class="btn-primary" value ="Login"/>
                </EditForm>
            }
        </div>
        <div>
            <br /> 
            <br />
            <p style="color:#e52e50" >
                <h4>@alertMessage</h4>
            </p>
        </div>
    </div>

</div>



@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    LoginModel loginModel { get; set; }

    public string alertMessage{ get; set; }

    protected override Task OnInitializedAsync()
    {
        loginModel = new LoginModel();
        return base.OnInitializedAsync();
    }

    private async Task Login_Click()
    {
        var response = await adminPanelService.AdminLogin(loginModel);
        if (response.Status)
        {
            var userResponse = response.Message.Split("|");
            await sessionStorage.SetAsync("adminKey", userResponse[0]);
            await sessionStorage.SetAsync("adminName", userResponse[1]);
            await sessionStorage.SetAsync("adminEmail", userResponse[2]);

            await notify.InvokeAsync();
            navManager.NavigateTo("/");
        }
        else
        {
            alertMessage = response.Message;
        }
    }
}
